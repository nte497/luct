import React, { useState } from 'react';

const API_BASE_URL = 'http://localhost:5000/api';

const Register = ({ selectedRole, onRegisterSuccess, onNavigateToLogin, onBackToDashboard }) => {
  const [formData, setFormData] = useState({
    first_name: '',
    last_name: '',
    role: selectedRole ? selectedRole.id : '',
    faculty: '',
    department: '',
    password: '',
    confirmPassword: ''
  });
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [success, setSuccess] = useState('');

  const roles = [
    { id: 'student', title: 'Student' },
    { id: 'lecturer', title: 'Lecturer' },
    { id: 'principal_lecturer', title: 'Principal Lecturer' },
    { id: 'program_leader', title: 'Program Leader' },
    { id: 'faculty_manager', title: 'Faculty Manager' }
  ];

  const faculties = [
    'FICT',
    'FABE',
    'FDI'
  ];

  const departments = [
    'Computer Science',
    'Software Engineering',
    'Information Technology',
    'Information Systems',
    'Architecture',
    'Fashion Design',
    'Creative Design'
  ];

  // Auto-set password when component mounts or selectedRole changes
  React.useEffect(() => {
    if (selectedRole) {
      const password = selectedRole.id === 'faculty_manager' ? 'manager123' : `${selectedRole.id}123`;
      setFormData(prev => ({
        ...prev,
        role: selectedRole.id,
        password: password,
        confirmPassword: password
      }));
    }
  }, [selectedRole]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Auto-generate password based on role
    if (name === 'role') {
      let password = '';
      if (value === 'faculty_manager') {
        password = 'manager123';
      } else if (value) {
        password = `${value}123`;
      }
      
      setFormData(prev => ({
        ...prev,
        [name]: value,
        password: password,
        confirmPassword: password
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    // Validation
    if (!formData.first_name || !formData.last_name || !formData.role) {
      setError('Please fill in all required fields');
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    if (formData.password.length < 6) {
      setError('Password must be at least 6 characters long');
      return;
    }

    setIsLoading(true);

    try {
      const userData = {
        first_name: formData.first_name,
        last_name: formData.last_name,
        role: formData.role,
        faculty: formData.faculty,
        department: formData.department,
        password: formData.password
        // Email will be auto-generated by the server
      };

      console.log('Registering user:', userData);

      const response = await fetch(`${API_BASE_URL}/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData)
      });

      const responseData = await response.json();

      if (response.ok) {
        setSuccess(`Registration successful! You can now login as ${formData.role}`);
        
        // Clear form
        setFormData({
          first_name: '',
          last_name: '',
          role: selectedRole ? selectedRole.id : '',
          faculty: '',
          department: '',
          password: selectedRole && selectedRole.id === 'faculty_manager' ? 'manager123' : `${selectedRole ? selectedRole.id : 'student'}123`,
          confirmPassword: selectedRole && selectedRole.id === 'faculty_manager' ? 'manager123' : `${selectedRole ? selectedRole.id : 'student'}123`
        });
        
        // Call the success callback with the registered user data
        console.log('Calling onRegisterSuccess with:', responseData);
        onRegisterSuccess(responseData);
        
      } else {
        setError(responseData.error || 'Registration failed');
      }
    } catch (error) {
      setError('Network error. Please try again.');
      console.error('Registration error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getPasswordFormat = () => {
    if (formData.role === 'faculty_manager') {
      return 'manager123';
    } else if (formData.role) {
      return `${formData.role}123`;
    } else {
      return 'role123';
    }
  };

  return (
    <div className="role-dashboard">
      <div className="register-container">
        <button onClick={onBackToDashboard} className="back-btn">‚Üê Back to Roles</button>
        
        <h1>Register as {selectedRole ? selectedRole.title : 'New User'}</h1>
        
        {error && <div className="error-message">{error}</div>}
        {success && <div className="success-message">{success}</div>}
        
        <form onSubmit={handleSubmit} className="register-form">
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="first_name">First Name *</label>
              <input
                type="text"
                id="first_name"
                name="first_name"
                value={formData.first_name}
                onChange={handleInputChange}
                required
                placeholder="Enter your first name"
              />
            </div>

            <div className="form-group">
              <label htmlFor="last_name">Last Name *</label>
              <input
                type="text"
                id="last_name"
                name="last_name"
                value={formData.last_name}
                onChange={handleInputChange}
                required
                placeholder="Enter your last name"
              />
            </div>
          </div>

          <div className="form-group">
            <label htmlFor="role">Role *</label>
            <select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleInputChange}
              required
            >
              <option value="">Select your role</option>
              {roles.map(role => (
                <option key={role.id} value={role.id}>
                  {role.title}
                </option>
              ))}
            </select>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="faculty">Faculty</label>
              <select
                id="faculty"
                name="faculty"
                value={formData.faculty}
                onChange={handleInputChange}
              >
                <option value="">Select faculty</option>
                {faculties.map(faculty => (
                  <option key={faculty} value={faculty}>
                    {faculty}
                  </option>
                ))}
              </select>
            </div>

            <div className="form-group">
              <label htmlFor="department">Department</label>
              <select
                id="department"
                name="department"
                value={formData.department}
                onChange={handleInputChange}
              >
                <option value="">Select department</option>
                {departments.map(dept => (
                  <option key={dept} value={dept}>
                    {dept}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="password">Password *</label>
              <input
                type="text"
                id="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                required
                readOnly
                className="read-only"
              />
              <small>Password is auto-generated based on your role</small>
            </div>

            <div className="form-group">
              <label htmlFor="confirmPassword">Confirm Password *</label>
              <input
                type="text"
                id="confirmPassword"
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                required
                readOnly
                className="read-only"
              />
            </div>
          </div>

          <div className="form-actions">
            <button 
              type="button" 
              onClick={onNavigateToLogin}
              className="demo-btn"
            >
              Back to Login
            </button>
            
            <button 
              type="submit" 
              disabled={isLoading}
              className="submit-btn"
            >
              {isLoading ? 'Registering...' : 'Register'}
            </button>
          </div>
        </form>

        <div className="login-instruction">
          <p><strong>Password format:</strong> {getPasswordFormat()}</p>
          {formData.role === 'faculty_manager' && (
            <p className="special-note">
              <strong>Note for Faculty Manager:</strong> Your password is <strong>manager123</strong>
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Register;